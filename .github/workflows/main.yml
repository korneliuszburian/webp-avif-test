name: Build & Deploy WordPress Plugin

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-versions: ['8.1', '8.2', '8.3']
        wordpress-versions: ['6.0', '6.1', '6.2', 'latest']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: gd, imagick, mbstring
          tools: composer:v2
          coverage: none
        
      - name: Check for composer.json
        id: check_composer
        run: |
          if [ -f "composer.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Composer dependencies
        if: steps.check_composer.outputs.exists == 'true'
        run: |
          composer install --no-progress --prefer-dist --optimize-autoloader

      - name: PHP Syntax Check
        run: |
          find . -type f -name "*.php" -not -path "./vendor/*" -print0 | xargs -0 -n1 php -l

      - name: Code Quality & Security Checks
        if: ${{ matrix.php-versions == '8.1' && matrix.wordpress-versions == 'latest' && steps.check_composer.outputs.exists == 'true' }}
        run: |
          composer require --dev squizlabs/php_codesniffer wp-coding-standards/wpcs dealerdirect/phpcodesniffer-composer-installer phpstan/phpstan phpcompatibility/php-compatibility
          
          echo "Running PHP CodeSniffer..."
          vendor/bin/phpcs --standard=phpcs.xml.dist --extensions=php .
          
          echo "Running PHPStan..."
          vendor/bin/phpstan analyse --no-progress --level=3 src/
          
          echo "Running Security Checks..."
          vendor/bin/phpcs --standard=PHPCompatibility,PSR12 --extensions=php --runtime-set testVersion 8.1- src/
        continue-on-error: true  # Report issues but don't fail the build

  build:
    name: Build Plugin Package
    needs: validate
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: gd, imagick, mbstring
          tools: composer:v2
          coverage: none

      - name: Check for composer.json
        id: check_composer_build
        run: |
          if [ -f "composer.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Composer dependencies
        if: steps.check_composer_build.outputs.exists == 'true'
        run: |
          composer install --no-dev --no-progress --prefer-dist --optimize-autoloader

      - name: Create build directory
        run: |
          mkdir -p build/wp-image-optimizer

      - name: Copy files to build directory
        run: |
          rsync -av --exclude-from='.distignore' --exclude='.git/' --exclude='.github/' --exclude='build/' --exclude='node_modules/' . build/wp-image-optimizer/

      - name: Create plugin zip
        run: |
          cd build
          zip -r wp-image-optimizer-${{ steps.get_version.outputs.VERSION }}.zip wp-image-optimizer

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/wp-image-optimizer-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: wp-image-optimizer-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

  deploy-wp-org:
    name: Deploy to WordPress.org
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: WordPress Plugin Deploy
        uses: 10up/action-wordpress-plugin-deploy@stable
        env:
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SLUG: wp-image-optimizer
