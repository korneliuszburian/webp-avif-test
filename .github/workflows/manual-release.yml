name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="No previous tags found"
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "::notice::Latest git tag: $LATEST_TAG | Requested new version: ${{ github.event.inputs.version }}"

      - name: Configure Git
        run: |
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'

      - name: Generate Changelog
        id: generate_changelog
        run: |
          # Determine whether to use commits since latest tag or all commits
          if [[ "${{ steps.latest_tag.outputs.LATEST_TAG }}" == "No previous tags found" ]]; then
            echo "No previous tag found. Getting all commits..."
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            echo "Getting commits since tag ${{ steps.latest_tag.outputs.LATEST_TAG }}..."
            COMMITS=$(git log ${{ steps.latest_tag.outputs.LATEST_TAG }}..HEAD --pretty=format:"%s" --no-merges)
          fi
          
          # Process commits into changelog format
          CHANGELOG=""
          if [[ -z "$COMMITS" ]]; then
            echo "No commits found for changelog"
            echo "CHANGELOG_ENTRIES=- Release version ${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "Processing commits for changelog..."
            while IFS= read -r COMMIT; do
              # Skip version bump commits
              if [[ "$COMMIT" =~ ^[Bb]ump\ version ]]; then
                continue
              fi
              
              # Process based on conventional commit format when possible
              if [[ "$COMMIT" =~ ^fix(\(.*\))?:\s*(.*) ]]; then
                CHANGELOG="$CHANGELOG- Fix: ${BASH_REMATCH[2]}\n"
              elif [[ "$COMMIT" =~ ^feat(\(.*\))?:\s*(.*) ]]; then
                CHANGELOG="$CHANGELOG- Feature: ${BASH_REMATCH[2]}\n"
              elif [[ "$COMMIT" =~ ^improve(\(.*\))?:\s*(.*) ]]; then
                CHANGELOG="$CHANGELOG- Improvement: ${BASH_REMATCH[2]}\n"
              elif [[ "$COMMIT" =~ ^docs(\(.*\))?:\s*(.*) ]]; then
                CHANGELOG="$CHANGELOG- Documentation: ${BASH_REMATCH[2]}\n"
              else
                # Capitalize first letter
                FIRST_CHAR=$(echo "${COMMIT:0:1}" | tr '[:lower:]' '[:upper:]')
                REST_OF_STRING="${COMMIT:1}"
                
                # Ensure it ends with a period
                if [[ "$REST_OF_STRING" != *"." ]]; then
                  REST_OF_STRING="$REST_OF_STRING."
                fi
                
                PROCESSED_COMMIT="$FIRST_CHAR$REST_OF_STRING"
                CHANGELOG="$CHANGELOG- $PROCESSED_COMMIT\n"
              fi
            done <<< "$COMMITS"
            
            # Remove trailing newline and set output
            CHANGELOG=$(echo -e "$CHANGELOG" | sed -e 's/\n$//')
            echo "CHANGELOG_ENTRIES=$CHANGELOG" >> $GITHUB_OUTPUT
            echo "Generated changelog entries:"
            echo -e "$CHANGELOG"
          fi

      - name: Update plugin version
        run: |
          sed -i "s/Version: .*/Version: ${{ github.event.inputs.version }}/" wp-image-optimizer.php
          sed -i "s/define( 'WP_IMAGE_OPTIMIZER_VERSION', '.*' );/define( 'WP_IMAGE_OPTIMIZER_VERSION', '${{ github.event.inputs.version }}' );/" wp-image-optimizer.php

      - name: Update changelog
        run: |
          DATE=$(date +%Y-%m-%d)
          CHANGELOG_ENTRY="## [${{ github.event.inputs.version }}] - $DATE\n\n"
          
          # Use auto-generated changelog
          CHANGELOG_CONTENT="${{ steps.generate_changelog.outputs.CHANGELOG_ENTRIES }}"
          echo "$CHANGELOG_CONTENT" | while IFS= read -r line; do
            CHANGELOG_ENTRY="${CHANGELOG_ENTRY}${line}\n"
          done
          
          if [ -f "CHANGELOG.md" ]; then
            sed -i "1s/^/# Changelog\n\n$CHANGELOG_ENTRY\n/" CHANGELOG.md
          else
            echo -e "# Changelog\n\n$CHANGELOG_ENTRY" > CHANGELOG.md
          fi

      - name: Commit changes
        run: |
          git add wp-image-optimizer.php CHANGELOG.md
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git tag -a "v${{ github.event.inputs.version }}" -m "Version ${{ github.event.inputs.version }}"
          git push origin HEAD:master
          git push origin "v${{ github.event.inputs.version }}"

  # The rest of the build & release process will be triggered by the release.yml workflow when the tag is pushed
