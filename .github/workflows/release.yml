name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: gd, imagick, mbstring
          tools: composer:v2
          coverage: none

      - name: Install dependencies
        run: |
          composer install --no-dev --optimize-autoloader

      - name: Update version in plugin file
        run: |
          sed -i "s/Version: .*/Version: ${{ steps.get_version.outputs.VERSION }}/" wp-image-optimizer.php
          sed -i "s/define( 'WP_IMAGE_OPTIMIZER_VERSION', '.*' );/define( 'WP_IMAGE_OPTIMIZER_VERSION', '${{ steps.get_version.outputs.VERSION }}' );/" wp-image-optimizer.php

      - name: Build plugin
        run: |
          # Create build directory
          mkdir -p build
          
          # Create plugin zip
          zip -r build/wp-image-optimizer.zip . \
          -x "*.git*" \
          -x ".github/*" \
          -x ".vscode/*" \
          -x "build/*" \
          -x "node_modules/*" \
          -x ".distignore" \
          -x ".gitignore" \
          -x "phpcs.xml.dist" \
          -x "phpstan.neon" \
          -x "composer.json" \
          -x "composer.lock" \
          -x "package.json" \
          -x "package-lock.json" \
          -x "README.md" \
          -x "bin/*" \
          -x "scripts/*" \
          -x "tests/*"

      - name: Update release info file
        env:
          PLUGIN_NAME: ${{ vars.PLUGIN_NAME || 'WebP & AVIF Image Optimizer' }}
          PLUGIN_SLUG: ${{ vars.PLUGIN_SLUG || 'wp-image-optimizer' }}
          PLUGIN_REQUIRES: ${{ vars.PLUGIN_REQUIRES || '5.8' }}
          PLUGIN_TESTED: ${{ vars.PLUGIN_TESTED || '6.7' }}
          PLUGIN_REQUIRES_PHP: ${{ vars.PLUGIN_REQUIRES_PHP || '8.1' }}
        run: |
          # Set variables
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          REPO="${{ github.repository }}"
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          RELEASE_DATE=$(date +"%Y-%m-%d")
          
          # Extract changelog from CHANGELOG.md if it exists
          CHANGELOG="<h4>$VERSION - $(date +'%B %Y')</h4><ul><li>New version release</li></ul>"
          if [ -f "CHANGELOG.md" ]; then
            ENTRY=$(grep -A20 "## \[$VERSION\]" CHANGELOG.md | grep -v "^##" | grep -v "^$" | head -10)
            if [ ! -z "$ENTRY" ]; then
              CHANGELOG="<h4>$VERSION - $(date +'%B %Y')</h4><ul>"
              while IFS= read -r line; do
                # Remove the leading dash and convert to list item
                if [[ "$line" =~ ^-[[:space:]]+(.*) ]]; then
                  ITEM="${BASH_REMATCH[1]}"
                  CHANGELOG="$CHANGELOG<li>$ITEM</li>"
                fi
              done <<< "$ENTRY"
              CHANGELOG="$CHANGELOG</ul>"
            fi
          fi
          
          # Use jq to create the JSON file (much safer for YAML)
          cat > release-info.json << EOF
          {
            "name": "$PLUGIN_NAME",
            "slug": "$PLUGIN_SLUG",
            "version": "$VERSION",
            "download_url": "https://github.com/$REPO/releases/download/v$VERSION/wp-image-optimizer.zip",
            "author": "<a href='https://github.com/korneliuszburian'>Korneliusz Burian</a>",
            "author_profile": "https://github.com/korneliuszburian",
            "requires": "$PLUGIN_REQUIRES",
            "tested": "$PLUGIN_TESTED",
            "requires_php": "$PLUGIN_REQUIRES_PHP",
            "last_updated": "$DATE",
            "homepage": "https://github.com/$REPO",
            "sections": {
              "description": "High-performance WebP and AVIF image conversion plugin for WordPress.",
              "installation": "Upload the plugin to your WordPress site and activate it. Configure settings from the 'Settings > WebP & AVIF' menu.",
              "changelog": "$CHANGELOG"
            },
            "icons": {
              "1x": "https://raw.githubusercontent.com/$REPO/master/assets/icon-128x128.png",
              "2x": "https://raw.githubusercontent.com/$REPO/master/assets/icon-256x256.png"
            },
            "versions": {
              "$VERSION": {
                "version": "$VERSION",
                "zip_url": "https://github.com/$REPO/releases/download/v$VERSION/wp-image-optimizer.zip",
                "requires": "$PLUGIN_REQUIRES",
                "tested": "$PLUGIN_TESTED",
                "requires_php": "$PLUGIN_REQUIRES_PHP",
                "release_date": "$RELEASE_DATE"
              }
            },
            "current_version": "$VERSION"
          }
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/wp-image-optimizer.zip
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## ${{ vars.PLUGIN_NAME || 'WebP & AVIF Image Optimizer' }} ${{ steps.get_version.outputs.VERSION }}
            
            See [CHANGELOG.md](CHANGELOG.md) for details.

      # First, commit the updated file to gh-pages branch
      - name: Configure Git for GitHub Pages
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0

      - name: Copy release info to gh-pages
        run: |
          cp release-info.json gh-pages/
          cd gh-pages
          git add release-info.json
          git commit -m "Update release info for v${{ steps.get_version.outputs.VERSION }}" || echo "No changes to commit"
          git push

      - name: Completion Message
        run: |
          echo "Release v${{ steps.get_version.outputs.VERSION }} has been created!"
          echo "release-info.json has been updated directly on the gh-pages branch."
          echo "Your release-info.json is available at:"
          echo "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/release-info.json"
